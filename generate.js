console.clear();
let defaults = require("./defaults.json");
const fs = require('fs');
const XMLJSON = require('xml2json');
const CSSJSON = require('cssjson');

let website_folder = "./website/";

let onStart = `GAME.DEFAULT.disablePrediction();
	GAME.UI.updateDIV("customGUIHolder", "display", "block");
	GAME.UI.updateDIV("gameUI", "textAlign", "left");
    GAME.DEFAULT.disablePlayerBehaviour();
    GAME.DEFAULT.disable3D();
    GAME.INPUTS.disableDefault();
    GAME.UI.hideCrosshair();
    GAME.PLAYERS.disableMeshes();

	
    
    GAME.UI.addDIV("SOTT_BODY", true, "position: absolute; left: 0; right: 0; top: 0; bottom: 0; z-index: 9999999999; background-color: white;");
`;

let names = [];
let styles = [CSSJSON.toJSON(fs.readFileSync("./index.css"))];
function name_generator(length) {
    let x = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890", name = "SOTT_";
    while (true) {
        for (let i = 0; i < length; i++) {
            name += x[Math.floor(Math.random() * x.length)];
        }
        if (!names.includes(name)) break;
        name = "SOTT_";
    }
    names.push(name);
    return name;
}

function build_dom(obj){
	const html = obj.html[0];
	const head = html?.head[0];
	const body = html?.body[0];
	for (const link of head.link) {
		if (link?.rel == "stylesheet"){
			styles.push(CSSJSON.toJSON(fs.readFileSync(website_folder + link.href)));
		}
	}
	console.log(JSON.stringify(styles));

	//get head data.
	defaults.krunker_map.name = head?.title[0] ?? "No title";

	recussive_creation(body, "SOTT_BODY");
}

let reserved_names = ["id", "class", "$t"];

function recussive_creation(obj, parent) {
	for (const el_type of Object.keys(obj)){
		if (el_type == "$t"){
			if (!Object.keys(obj).some(x => !reserved_names.includes(x))) {
				if (obj[el_type].length > 0) onStart += `    GAME.UI.updateDIVText("${parent}", "${obj[el_type]}");\n`;
				return;
			} else if (obj[el_type].length > 0){
				throw("Please do not use text in nested elements. Make a special element for each bit of text.");
			}
		} 
		else if (reserved_names.includes(el_type)) {
			continue;
		}

		for (const children of obj[el_type]) {
			if (typeof children == "string"){
				create_text_el(el_type, parent, obj[el_type]);
			}
			else if (typeof children == "object"){
				let name = el_type + "_" + name_generator(12);
				onStart += `    GAME.UI.addDIV("${name}", true, "", "${parent}");\n`;
				recussive_creation(children, name);
			}
		}
	}

	function create_text_el(el_type, parent, text){
		let name = el_type + "_" + name_generator(12);
		onStart += `    GAME.UI.addDIV("${name}", true, "", "${parent}");\n`;
		if (text.length > 0) onStart += `    GAME.UI.updateDIVText("${name}", "${text}");\n`;
	}
}

for (const file of fs.readdirSync(website_folder)) {
    if (file == "index.html") {
        let contents = XMLJSON.toJson(fs.readFileSync(website_folder + file), {
			object: true,
			arrayNotation: true,
			sanitize: true
		});
		//console.log(JSON.stringify(contents));
		build_dom(contents);
    }
}

let script = `#Generated by Swat's SOTT_HTMLTKSC

public action start(){
    ${onStart}
}`;

defaults.krunker_map.scripts.client = btoa(script);
console.log(JSON.stringify(defaults.krunker_map));